Git笔记

常用命令：
	1.	git init：初始化
	2.	git status：查看工作区状态
	3.	git add <文件名>：添加到暂存区
		git add -u(等同于"git add --update")：把工作区内所有tracked文件中被修改过或已删除文件的信息添加到暂存区。
			但是它不会处理untracted的文件。还可以在后面加上路径限制，只提交某个路径下的所有更改。
		git add -A(等同于"git add --all")：把工作区内所有tracked文件中被修改过或已删除文件，包括所有untracted的文件信息
			添加到暂存区。该命令同样可以加上路径限制，只提交某个路径下的所有更改。
	4.	git commit -m "本次提交的修改日志"：提交到本地仓库
			注：commit提交的是add到暂存区的修改，如果add之后又修改了文件，但是没有重新add，
			则commit的时候只提交第一次add之前的修改
	5.	git log：查看日志
		git log --pretty=oneline：注：参数“--pretty=oneline”不能有空格）
	6.	git reset [--soft --mixed --hard] HEAD^：回退版本(后面加数字n可以回退从当前数往后退的n个版本)
		git reset [--soft --mixed --hard] HEAD~：回退版本(后面加数字n可以回退从当前数往后退的n个版本)
		git reset [--soft --mixed --hard] commit_id：回退到指定的提交id的版本。
			三个参数的影响：
			--soft：将重置HEAD到指定的commit，但是工作区不会变化，将这次commit之后的变化都移动到暂存区。
			--mixed：默认值，重置HEAD到指定的commit，同时也会重置暂存区，使暂存区和版本库保持一致，将这次commit之后的变化移动到工作区。
			--hard：重置HEAD到指定的commit，同时也会将暂存区和工作区也都重置，使三者完全一致，将清除这次commit之后的所有变化。
	7.	git reflog：查看历史命令
	8.	git checkout -- <文件名>：撤销工作区修改，让文件恢复到最近的一次commit或者add操作。
			比如文件修改后没有add到暂存区，撤销修改会使文件和版本库一致，
			如果文件修改后add到了缓存区，然后又做了修改，此时撤销会使文件和暂存区一致。
			“--”必须存在，不然就是切换分支命令，且和文件名之间必须有空格。
	9	git reset HEAD <文件名>：撤销暂存区修改，如果不加文件名，则撤销暂存区所有的修改，就等于git reset --mixed HEAD
	10.	git rm <文件名>：删除版本库中的文件，同时删除工作区本地文件(该命令和add类似，都需要之后用commit提交)
		git rm -r <文件夹>：删除文件夹，-r表示递归所有子目录，如果要删除的，是空的文件夹，此处可以不用带上-r
		git rm --cached <文件名>：从版本库删除，但是保留工作区本地文件。
	11.	git diff：对比的是工作区和暂存区的差异。
		git diff --cached：对比的是暂存区和版本库最新提交的差异。
		git diff HEAD：对比的是工作区和版本库最新提交的差异。
	12.	git mv <原名称> <新名称>：文件的重命名。
	
分支管理：
	1.	git branch <分支名称>：创建分支
	2.	git switch <分支名称>：切换分支（可能旧版本不支持）
		git switch -c <分支名称>：创建并切换分支（可能旧版本不支持）
		git checkout <分支名称>：切换分支
		git checkout -b <分支名称>：创建并切换分支
	3.	git branch [-r] [-a]：查看分支(当前分支前会有一个*号)
			-r选项，可以用来查看远程分支，-a选项查看所有分支。
	4.	git merge <分支名称>：用于合并指定分支到当前分支
			--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并
		git merge --no-ff -m "合并的日志" <分支名称>
	5.	git branch -d <分支名称>：删除分支
	6.	git log --graph [--pretty=oneline] [--abbrev-commit]：查看分支合并日志
	7.	git branch -D <name>：强行删除一个没有合并的分支
	
	8.	git stash：保存当前工作内容到git的存储中，包括工作区已经tracked和添加到暂存区的修改。
			注：使用stash的场景比如当前正在做修改，但是需要紧急修复bug，此时可以将当前的修改保存起来，让工作区恢复未修改的状态，然后再做修改或切换分支。
	   	git stash save '注释'：(可以添加一些注释)
	9.	git stash list：查看隐藏的工作现场
	10.	git stash pop [–index] [stash_id]
		git stash pop 恢复最新的进度到工作区。git默认会把工作区和暂存区的改动都恢复到工作区。
		git stash pop --index 恢复最新的进度到工作区和暂存区。（尝试将原来暂存区的改动还恢复到暂存区）
		git stash pop stash@{1}恢复指定的进度到工作区。stash_id是通过git stash list命令得到的 
			通过git stash pop命令恢复进度后，会删除当前进度。
	11.	git stash apply [–-index] [stash_id]：
			恢复工作现场，但是恢复后，stash内容并不删除，其余和git stash pop 命令一样
	12.	git stash drop [stash_id]：删除一个存储的进度。如果不指定stash_id，则默认删除最新的存储进度。
	13.	git stash clear：删除所有存储的进度。
	14. git cherry-pick <commit-id>：复制一个特定的提交到当前分支。

远程仓库：
	1.	git remote：查看远程库信息。
		git remote -v：查看更详细的远程仓库信息。
	2.	git clone [-o <远程仓库名>] git@server-name:path/repo-name.git [本地目录名]：克隆远程仓库。
			clone的版本库默认的远程库名为origin，用 -o <远程仓库名>可以将仓库名指定为给定值。
			远程仓库名是 本地版本库为识别远程库的所取的命称或者说别名。（以下简称为远程库名）。
			该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，
			可以将目录名作为git clone命令的第二个参数。
	3.	git remote show <远程库名>：查看该远程库的详细信息
	4.	git remote add <远程库名> <git@server-name:path/repo-name.git>：创建一个远程仓库关联
	5.	git remote rm <远程库名>：删除该远程库关联。
	6.	git remote rename <原远程库名> <新远程库名>：重命名一个远程库的关联。
	7.	git fetch：将最新的提交从当前分支抓取下来。
			该命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。
		git fetch <远程库名>：将指定的远程库的所有分支的更新，全部抓取到本地。
		git fetch <远程库名> <分支名>：将远程库指定的分支的更新取回到本地。
			所取回的更新，在本地要用"远程库名/分支名"的形式读取，例如默认的"origin/master"，是作为一个远程分支存在的。
			
			针对这个远程分支可以根据该远程分支创建一个本地分支，例如git checkout -b newBrach origin/master
			或者合并该远程分支，例如git merge origin/master 或者 git rebase origin/master

	8.	git checkout -b <本地分支名> <远程库名>/<远程分支名>：以远程仓库的分支创建一个本地分支。
	9.	git pull <远程库名> <远程分支名>:<本地分支名>：取回远程仓库某个分支的更新，再与本地的指定分支合并。
			如果远程分支是与当前分支合并，则冒号后及后面的本地分支名可以省略。
			如果pull失败了，原因可能是没有指定本地的分支与远程分支的连接。

			在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。
			比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，
			本地的master分支自动"追踪"origin/master分支。Git也允许手动建立追踪关系，该命令在下面有说明。
			
			如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。
			git pull origin 
			上面命令表示，本地的当前分支自动与对应的origin主机"追踪分支"（remote-tracking branch）进行合并。

			如果当前分支只有一个追踪分支，连远程主机名都可以省略。
			git pull 
			上面命令表示，当前分支自动与唯一一个追踪分支进行合并。
			
			如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。
			但是，如果加上参数 -p 就会在本地删除远程已经删除的分支。
			git pull -p

	10.	git branch --set-upstream-to=<远程仓库名>/<远程分支名> [<本地分支名>]：创建本地分支和远程分支的追踪关系。
		git branch --set-upstream-to <远程仓库名>/<远程分支名> [<本地分支名>]：创建本地分支和远程分支的追踪关系。
		git branch -u <远程仓库名>/<远程分支名> [<本地分支名>]：创建本地分支和远程分支的追踪关系。
		git branch --set-upstream <本地分支名> <远程库名>/<远程分支名>：功能和上面的一样，但是Windows中较新版本到的git已经不再支持该命令。
		
	11.	git push <远程库名> <本地分支名>:<远程分支名>：将本地分支的更新，推送到远程仓库。
			注意，分支推送顺序的写法是<来源地>:<目的地>，所以git pull是<远程分支>:<本地分支>，而git push是<本地分支>:<远程分支>。

			如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"的远程分支（通常两者同名），
			如果该远程分支不存在，则会被新建。例如：
			git push origin master
			上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。

			如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。
			git push origin :master
			等同于
			git push origin --delete master
			上面命令表示删除origin主机的master分支。

			如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。
			git push origin
			上面命令表示，将当前分支推送到origin主机的对应分支。

			如果当前分支只有一个追踪分支，那么主机名都可以省略。
			git push

			-u参数，Git不但会把本地分支内容推送的远程的该分支，还会把本地的该分支和远程的同名分支关联起来，
			在以后的推送或者拉取时就可以简化命令。
			
			如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以
			不加任何参数使用git push。
			git push -u origin master
			上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加
			任何参数使用git push了。

标签管理：
	1.	git tag <tag-name> [<commit-id>]：打一个新的标签，默认标签是打在最新提交的commit上的，
			默认为HEAD，也可以指定一个commit id
	2.	git tag：查看所有标签
	3.	git tag -a <tag-name> -m "注释" <commit-id>：创建带有说明的标签，用-a指定标签名，-m指定说明文字
	4.	git show <tagname>：查看标签信息
	5.	git push <仓库名> <tag-name>：将某个标签推送到远程
		git push <仓库名> --tags：一次性推送全部尚未推送到远程的本地标签
	6.	git tag -d <tag-name>：删除标签
	7.	git push origin :refs/tags/<tagname>：可以删除一个远程标签，但是需要先删除本地标签

自定义Git：
	1.	git add -f <文件名>：强制添加被ignore的文件
	2.	git check-ignore -v <文件名>：检查这个文件是被哪条ignore规则忽略了
	3.	git config --global alias.<简写> <原命令>：给命令取别名，简化写法
	4.	git alias：可以查看所有的别名配置。